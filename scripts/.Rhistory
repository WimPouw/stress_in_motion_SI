colnames(tab) <- c('Estimate', 'SE', 'df', 't-value', 'p-value')
rownames(tab) <- c('Intercept (no weight)', 'vs. weight')
knitr::kable(round(tab,3))
a <- ggplot(sub2, aes(x=movstart))+ geom_smooth(aes(y=env_z, color = 'ppn'), method = 'gam')+
facet_grid(.~movement_condition)+geom_hline(yintercept = 0)+
xlim(-500, 500)+theme_cowplot(12)+
geom_vline(xintercept = 0, linetype='dashed')+theme(axis.text.x = element_text(angle=60, hjust=1))+
ylab('amplitude envelope \n (normalized)')
a
a <- ggplot(sub2, aes(x=movstart, color = ppn))+ geom_smooth(aes(y=env_z), method = 'gam')+
facet_grid(.~movement_condition)+geom_hline(yintercept = 0)+
xlim(-500, 500)+theme_cowplot(12)+
geom_vline(xintercept = 0, linetype='dashed')+theme(axis.text.x = element_text(angle=60, hjust=1))+
ylab('amplitude envelope \n (normalized)')
a
library(readr)
#Local data
localfolder <- "C:/Research_Projects/veni_local/exp100/"
#lets set all the data folders
rawd  <- paste0(localfolder, 'Trials/')    #raw trial level data
procd <- paste0(localfolder, 'Processed/triallevel/') #processed data folder
procdtot <- paste0(localfolder, 'Processed/complete_datasets/') #processed data folder
daset <- paste0(localfolder, 'Dataset/')   #dataset folder
meta  <- paste0(localfolder, 'Meta/')   #Meta and trial data
tr_wd <- read.csv(paste0(procdtot, 'fulldata.csv'))
tsl   <- read.csv(paste0(procdtot, 'time_series_all.csv'))
setwd("C:/Research_Projects/WimLabCodeVENI/ExperimentDocumentation/Experiment0_1_SinglePerson")
library(ggplot2)
#we will only look at vocalizations and we exclude practice trials
sub2 <- subset(tsl, vocal_condition != 'expire' & trial_number > 9)
sub2$movement_condition <- revalue(sub2$movement_condition, c("extension_stop"="extension", "internal_rotation_stop"="internal r.", "flexion_stop"="flexion", "external_rotation_stop"="external r."))
ggplot(sub2, aes(x=movstart))+ geom_smooth(aes(y=env_z, linetype=vocal_condition), method = 'gam', color = 'purple')+
facet_grid(.~movement_condition)+geom_hline(yintercept = 0)+
xlim(-500, 500)+theme_cowplot(12)+
geom_vline(xintercept = 0, linetype='dashed')+theme(axis.text.x = element_text(angle=60, hjust=1))+
ylab('amplitude envelope \n (normalized)')
a <- ggplot(sub2, aes(x=movstart, color = ppn))+ geom_smooth(aes(y=env_z, linetype=vocal_condition), method = 'gam')+
facet_grid(.~movement_condition)+geom_hline(yintercept = 0)+
xlim(-500, 500)+theme_cowplot(12)+
geom_vline(xintercept = 0, linetype='dashed')+theme(axis.text.x = element_text(angle=60, hjust=1))+
ylab('amplitude envelope \n (normalized)')
ggplotly(a)
library(plotly)
ggplotly(a)
library(ggplot2)
library(plyr)
library(cowplot)
library(plotly)
#we will only look at vocalizations and we exclude practice trials
sub2 <- subset(tsl, vocal_condition != 'expire' & trial_number > 9)
sub2$movement_condition <- revalue(sub2$movement_condition, c("extension_stop"="extension", "internal_rotation_stop"="internal r.", "flexion_stop"="flexion", "external_rotation_stop"="external r."))
####################################SET common colors for muscles
col_pectoralis    <- '#e7298a'
col_infraspinatus <- '#7570b3'
col_rectus        <- '#d95f02'
col_erector       <- '#1b9e77'
colors_mus <- c("pectoralis major" = col_pectoralis, "infraspinatus" = col_infraspinatus, "rectus abdominus" = col_rectus, "erector spinae" = col_erector)
#normalize
sub2$pectoralis_major  <- scale(sub2$pectoralis_major)
sub2$infraspinatus     <- scale(sub2$infraspinatus)
sub2$rectus_abdominus  <- scale(sub2$rectus_abdominus)
sub2$erector_spinae    <- scale(sub2$erector_spinae)
sub2$pp <- as.factor(sub2$pp)
#what is the average movement start and end?
average_mov_start <- mean(sub2$time_ms[sub2$movstart==0])
#this we will use to create
a <- ggplot(sub2, aes(x=movstart, color = pp))+ geom_smooth(aes(y=env_z, linetype=vocal_condition), method = 'gam')+
facet_grid(.~movement_condition)+geom_hline(yintercept = 0)+
xlim(-500, 500)+theme_cowplot(12)+
geom_vline(xintercept = 0, linetype='dashed')+theme(axis.text.x = element_text(angle=60, hjust=1))+
ylab('amplitude envelope \n (normalized)')
ggplotly(a)
sub2$pp <- ifelse(sub2$pp %in% c('41', '42'), '4', sub2$pp)
sub2$pp <- as.factor(sub2$pp)
a <- ggplot(sub2, aes(x=movstart)+ geom_smooth(aes(y=env_z, color = pp)), method = 'gam')+
facet_grid(.~movement_condition)+geom_smooth(aes(y=env_z), color = 'black')+geom_hline(yintercept = 0)+
xlim(-500, 500)+theme_cowplot(12)+
geom_vline(xintercept = 0, linetype='dashed')+theme(axis.text.x = element_text(angle=60, hjust=1))+
ylab('amplitude envelope \n (normalized)')
a <- ggplot(sub2, aes(x=movstart)+ geom_smooth(aes(y=env_z, color = pp), method = 'gam')+
facet_grid(.~movement_condition)+geom_smooth(aes(y=env_z), color = 'black')+geom_hline(yintercept = 0)+
xlim(-500, 500)+theme_cowplot(12)+
geom_vline(xintercept = 0, linetype='dashed')+theme(axis.text.x = element_text(angle=60, hjust=1))+
ylab('amplitude envelope \n (normalized)')
a <- ggplot(sub2, aes(x=movstart)+ geom_smooth(aes(y=env_z, color = pp), method = 'gam')+
a
a <- ggplot(sub2, aes(x=movstart))+ geom_smooth(aes(y=env_z, color = pp), method = 'gam')+
facet_grid(.~movement_condition)+geom_smooth(aes(y=env_z), color = 'black')+geom_hline(yintercept = 0)+
xlim(-500, 500)+theme_cowplot(12)+
geom_vline(xintercept = 0, linetype='dashed')+theme(axis.text.x = element_text(angle=60, hjust=1))+
ylab('amplitude envelope \n (normalized)')+facet_grid(.~vocal_condition)
ggplotly(a)
a <- ggplot(sub2, aes(x=movstart))+ geom_smooth(aes(y=env_z, color = pp), method = 'gam')+
facet_grid(.~movement_condition)+geom_smooth(aes(y=env_z), color = 'black')+geom_hline(yintercept = 0)+
xlim(-500, 500)+theme_cowplot(12)+
geom_vline(xintercept = 0, linetype='dashed')+theme(axis.text.x = element_text(angle=60, hjust=1))+
ylab('amplitude envelope \n (normalized)')+facet_grid(movement_condition~vocal_condition)
ggplotly(a)
library(ggplot2)
library(plyr)
library(cowplot)
library(plotly)
#we will only look at vocalizations and we exclude practice trials
sub2 <- subset(tsl, trial_number > 9)
sub2$movement_condition <- revalue(sub2$movement_condition, c("extension_stop"="extension", "internal_rotation_stop"="internal r.", "flexion_stop"="flexion", "external_rotation_stop"="external r."))
####################################SET common colors for muscles
col_pectoralis    <- '#e7298a'
col_infraspinatus <- '#7570b3'
col_rectus        <- '#d95f02'
col_erector       <- '#1b9e77'
colors_mus <- c("pectoralis major" = col_pectoralis, "infraspinatus" = col_infraspinatus, "rectus abdominus" = col_rectus, "erector spinae" = col_erector)
#normalize
sub2$pectoralis_major  <- scale(sub2$pectoralis_major)
sub2$infraspinatus     <- scale(sub2$infraspinatus)
sub2$rectus_abdominus  <- scale(sub2$rectus_abdominus)
sub2$erector_spinae    <- scale(sub2$erector_spinae)
sub2$pp <- ifelse(sub2$pp %in% c('41', '42'), '4', sub2$pp)
sub2$pp <- as.factor(sub2$pp)
#what is the average movement start and end?
average_mov_start <- mean(sub2$time_ms[sub2$movstart==0])
#this we will use to create
a <- ggplot(sub2, aes(x=movstart))+ geom_smooth(aes(y=env_z, color = pp), method = 'gam')+geom_smooth(aes(y=env_z), color = 'black')+geom_hline(yintercept = 0)+
xlim(-500, 500)+theme_cowplot(12)+
geom_vline(xintercept = 0, linetype='dashed')+theme(axis.text.x = element_text(angle=60, hjust=1))+
ylab('amplitude envelope \n (normalized)')+facet_grid(movement_condition~vocal_condition)
ggplotly(a)
f <- ggplot(sub2, aes(x=movstart))+  geom_smooth(aes(y=speed, color = pp), method = 'gam')+
geom_smooth(aes(y=speed, color = pp), color= 'black', method = 'gam')+
xlim(-500, 500)+facet_grid(.~movement_condition)+theme_cowplot(12)+scale_color_manual(values = colors_mus)+
geom_vline(xintercept = 0, linetype='dashed')+theme(axis.text.x = element_text(angle=60, hjust=1))+
ylab('speed wrist')+facet_grid(movement_condition~vocal_condition)
f
f <- ggplot(sub2, aes(x=movstart))+  geom_smooth(aes(y=speed, color = pp), method = 'gam')+
geom_smooth(aes(y=speed, color = pp), color= 'black', method = 'gam')+
xlim(-500, 500)+facet_grid(.~movement_condition)+theme_cowplot(12)+scale_color_manual(values = colors_mus)+
geom_vline(xintercept = 0, linetype='dashed')+theme(axis.text.x = element_text(angle=60, hjust=1))+
ylab('speed wrist')+facet_grid(movement_condition~vocal_condition)
ggplotly(f)
c <- ggplot(sub2, aes(x=movstart))+ geom_smooth(aes(y=erector_spinae, color = pp), method = 'gam')+geom_smooth(aes(y=erector_spinae), color = 'black')+geom_hline(yintercept = 0)+
xlim(-500, 500)+theme_cowplot(12)+
geom_vline(xintercept = 0, linetype='dashed')+theme(axis.text.x = element_text(angle=60, hjust=1))+
ylab('sEMG normalized within participants')+facet_grid(movement_condition~vocal_condition)+ggtitle('sEMG erector spinae')
ggplotly(c)
d <- ggplot(sub2, aes(x=movstart))+ geom_smooth(aes(y=rectus_abdominus, color = pp), method = 'gam')+geom_smooth(aes(y=rectus_abdominus), color = 'black')+geom_hline(yintercept = 0)+
xlim(-500, 500)+theme_cowplot(12)+
geom_vline(xintercept = 0, linetype='dashed')+theme(axis.text.x = element_text(angle=60, hjust=1))+
ylab('sEMG normalized within participants')+facet_grid(movement_condition~vocal_condition)+ggtitle('sEMG rectus abdominus')
ggplotly(d)
tr_wd
View(tr_wd)
condition <- sub$movement_condition=='flexion'
datcor <- cbind.data.frame(sub$max_pectoral[condition], sub$max_infra[condition], sub$max_rectus[condition], sub$max_erector[condition], sub$max_COPc[condition], sub$max_amp_c_around_move[condition])
cor <- datcor %>%
corx(triangle = "lower",
stars    = c(0.05, 0.01, 0.001))
library(corrplot)
cor
condition <- sub$movement_condition=='flexion'
datcor <- cbind.data.frame(sub$max_pectoral[condition], sub$max_infra[condition], sub$max_rectus[condition], sub$max_erector[condition], sub$max_COPc[condition], sub$max_amp_c_around_move[condition])
cor <- datcor %>%
corx(triangle = "lower",
stars    = c(0.05, 0.01, 0.001))
cor
a <- ggplot(sub, aes(x = max_COPc))+geom_point(aes(y=max_amp_c_around_move, color = 'infraspinatus'), size=0.2)+geom_smooth(aes(y=max_amp_c_around_move), method='lm')+
ggtitle('focal muscles: \n infraspinatus')+scale_color_manual(values = colors_mus)+ylab('max sEMG activity \n (normalized)')+
xlab('max change in \n center of pressure')+theme_cowplot(12)+theme(plot.title = element_text(hjust = 0.5, size = 5, color = col_infraspinatus))+ theme(legend.position="none")+theme_cowplot()+ theme(legend.position = "none") #+facet_grid(.~movement_condition)
b <- ggplot(sub, aes(x = max_COPc))+geom_point(aes(y=min_amp_c_around_move, color = 'infraspinatus'), size=0.2)+geom_smooth(aes(y=max_amp_c_around_move), method='lm')+
ggtitle('focal muscles: \n infraspinatus')+scale_color_manual(values = colors_mus)+ylab('max sEMG activity \n (normalized)')+
xlab('max change in \n center of pressure')+theme_cowplot(12)+theme(plot.title = element_text(hjust = 0.5, size = 5, color = col_infraspinatus))+ theme(legend.position="none")+theme_cowplot()+ theme(legend.position = "none") #+facet_grid(.~movement_condition)
plot_grid(a,b)
condition <- sub$movement_condition=='internal rotation'
datcor <- cbind.data.frame(sub$max_pectoral[condition], sub$max_infra[condition], sub$max_rectus[condition], sub$max_erector[condition], sub$max_COPc[condition], sub$max_amp_c_around_move[condition])
cor <- datcor %>%
corx(triangle = "lower",
stars    = c(0.05, 0.01, 0.001))
library(corx)
condition <- sub$movement_condition=='flexion'
datcor <- cbind.data.frame(sub$max_pectoral[condition], sub$max_infra[condition], sub$max_rectus[condition], sub$max_erector[condition], sub$max_COPc[condition], sub$max_amp_c_around_move[condition])
cor <- datcor %>%
corx(triangle = "lower",
stars    = c(0.05, 0.01, 0.001))
cor
knitr::kable(cor$apa)
condition <- sub$movement_condition=='flexion'
datcor <- cbind.data.frame(sub$max_pectoral[condition], sub$max_infra[condition], sub$max_rectus[condition], sub$max_erector[condition], sub$max_COPc[condition], sub$max_amp_c_around_move[condition])
cor <- datcor %>%
corx(triangle = "lower",
stars    = c(0.05, 0.01, 0.001))
knitr::kable(cor$apa)
condition <- sub$movement_condition=='extension'
datcor <- cbind.data.frame(sub$max_pectoral[condition], sub$max_infra[condition], sub$max_rectus[condition], sub$max_erector[condition], sub$max_COPc[condition], sub$max_amp_c_around_move[condition])
cor <- datcor %>%
corx(triangle = "lower",
stars    = c(0.05, 0.01, 0.001))
knitr::kable(cor$apa)
condition <- sub$movement_condition=='flexion'
datcor <- cbind.data.frame(sub$max_pectoral[condition], sub$max_infra[condition], sub$max_rectus[condition], sub$max_erector[condition], sub$max_COPc[condition], sub$max_amp_c_around_move[condition])
cor <- datcor %>%
corx(triangle = "lower",
stars    = c(0.05, 0.01, 0.001))
co
cor
condition <- sub$movement_condition=='extension'
datcor <- cbind.data.frame(sub$max_pectoral[condition], sub$max_infra[condition], sub$max_rectus[condition], sub$max_erector[condition], sub$max_COPc[condition], sub$max_amp_c_around_move[condition])
cor <- datcor %>%
corx(triangle = "lower",
stars    = c(0.05, 0.01, 0.001))
knitr::kable(cor$apa)
condition <- sub$movement_condition=='external rotation'
datcor <- cbind.data.frame(sub$max_pectoral[condition], sub$max_infra[condition], sub$max_rectus[condition], sub$max_erector[condition], sub$max_COPc[condition], sub$max_amp_c_around_move[condition])
cor <- datcor %>%
corx(triangle = "lower",
stars    = c(0.05, 0.01, 0.001))
knitr::kable(cor$apa)
cor
condition <- sub$movement_condition=='external rotation'
datcor <- cbind.data.frame(sub$max_pectoral[condition], sub$max_infra[condition], sub$max_rectus[condition], sub$max_erector[condition], sub$max_COPc[condition], sub$max_amp_c_around_move[condition])
cor <- datcor %>%
corx(triangle = "lower",
stars    = c(0.05, 0.01, 0.001))
cor
condition <- sub$movement_condition=='extension'
datcor <- cbind.data.frame(sub$max_pectoral[condition], sub$max_infra[condition], sub$max_rectus[condition], sub$max_erector[condition], sub$max_COPc[condition], sub$max_amp_c_around_move[condition])
cor <- datcor %>%
corx(triangle = "lower",
stars    = c(0.05, 0.01, 0.001))
cor
# load in the data and save it
library(signal)
library(ggplot2)
library(gridExtra)
library(ggrepel)
library(cowplot)
#####################preprocessing functions
butter.it <- function(x, samplingrate, order, cutoff, type = "low")
{
nyquist <- samplingrate/2
xpad <- c(rep(0, 1000), x, rep(0,1000)) #add some padding
bf <- butter(order,cutoff/nyquist, type=type)
xpad <- as.numeric(signal::filtfilt(bf, xpad))
x <- xpad[1000:(1000+length(x)-1)] #remove the padding
}
#rectify and high and low pass EMG signals
reclow.it <- function(emgsignal, samplingrate, cutoffhigh, cutofflow)
{
#high pass filter
output <- butter.it(emgsignal, samplingrate=samplingrate, order=4, cutoff = cutoffhigh,
type = "high")
#rectify and low pass
output <<- butter.it(abs(output), samplingrate=samplingrate,  order=4, cutoff= cutofflow,
type = "low")
}
###########################################
####################################LOAD IN EMG DATA
EMGdata <- list.files(rawd, pattern = '*Dev_1.csv')
####################################SET common colors for muscles
col_pectoralis    <- '#e7298a'
col_infraspinatus <- '#7570b3'
col_rectus        <- '#d95f02'
col_erector       <- '#1b9e77'
colors_mus <- c("pectoralis major" = col_pectoralis, "infraspinatus" = col_infraspinatus, "rectus abdominus" = col_rectus, "erector spinae" = col_erector)
#show an example
emgd <- read.csv(paste0(rawd, EMGdata[822]))
setwd("C:/Research_Projects/WimLabCodeVENI/ExperimentDocumentation/Experiment0_1_SinglePerson")
# load in the data and save it
library(signal)
library(ggplot2)
library(gridExtra)
library(ggrepel)
library(cowplot)
#####################preprocessing functions
butter.it <- function(x, samplingrate, order, cutoff, type = "low")
{
nyquist <- samplingrate/2
xpad <- c(rep(0, 1000), x, rep(0,1000)) #add some padding
bf <- butter(order,cutoff/nyquist, type=type)
xpad <- as.numeric(signal::filtfilt(bf, xpad))
x <- xpad[1000:(1000+length(x)-1)] #remove the padding
}
#rectify and high and low pass EMG signals
reclow.it <- function(emgsignal, samplingrate, cutoffhigh, cutofflow)
{
#high pass filter
output <- butter.it(emgsignal, samplingrate=samplingrate, order=4, cutoff = cutoffhigh,
type = "high")
#rectify and low pass
output <<- butter.it(abs(output), samplingrate=samplingrate,  order=4, cutoff= cutofflow,
type = "low")
}
###########################################
####################################LOAD IN EMG DATA
EMGdata <- list.files(rawd, pattern = '*Dev_1.csv')
####################################SET common colors for muscles
col_pectoralis    <- '#e7298a'
col_infraspinatus <- '#7570b3'
col_rectus        <- '#d95f02'
col_erector       <- '#1b9e77'
colors_mus <- c("pectoralis major" = col_pectoralis, "infraspinatus" = col_infraspinatus, "rectus abdominus" = col_rectus, "erector spinae" = col_erector)
#show an example
emgd <- read.csv(paste0(rawd, EMGdata[822]))
library(readr)
#Local data
localfolder <- "C:/Research_Projects/veni_local/exp100/"
#lets set all the data folders
rawd  <- paste0(localfolder, 'Trials/')    #raw trial level data
procd <- paste0(localfolder, 'Processed/triallevel/') #processed data folder
procdtot <- paste0(localfolder, 'Processed/complete_datasets/') #processed data folder
daset <- paste0(localfolder, 'Dataset/')   #dataset folder
meta  <- paste0(localfolder, 'Meta/')   #Meta and trial data
#load in the trialinfo data (containing info like condition order, trial number etc)
trialf <- list.files(meta, pattern = 'triallist*')
triallist <- data.frame()
for(i in trialf)
{
tr <- read.csv(paste0(meta, i), sep = ';')
tr$ppn <- parse_number(i)
triallist <- rbind.data.frame(triallist,tr)
}
#make corrections to trial list due to experimenter errors
# p10 trial 21 run with a weight
triallist$weight_condition[triallist$ppn==10 & triallist$trial=="21"] <- 'weight' #triallist$trialindex[triallist$ppn==10 & triallist$trial=="21"]
# p14 double check trial "51", "52", "53" were all weight condition
triallist$weight_condition[triallist$ppn==14 & triallist$trial%in% c("51", "52", "53")] <- 'weight' #triallist$trialindex[triallist$ppn==14 & triallist$trial%in% c("51", "52", "53")]
#load in the metainfo data (containing info like gender, handedness, etc)
mtf <- list.files(meta, pattern = 'bodymeta*')
mtlist <- data.frame()
for(i in mtf)
{
tr <- read.csv(paste0(meta, i), sep = ';')
mtlist <- rbind.data.frame(mtlist,tr)
}
mtlist$ppn <- parse_number(as.character(mtlist$ppn))
#R-packages
library(papaja)   #for Rmarkdown template for APA(ish) manuscript
library(ggplot2)    #for plotting
library(gridExtra)  #for plotting in panels
library(knitr)
library(magick)  #for plots
library(cowplot) #for plots
library(plyr) #for revalue
#for running python in Rmarkdown
#Sys.setenv("RETICULATE_PYTHON" = "C:/ProgramData/Anaconda3/") # put in your python source
#library(reticulate) # for running python code in Rmarkdown
#if issues with recilate (download the developer version)
#remotes::install_github("rstudio/reticulate", force = TRUE)
#setwd(normalizePath(".."))
r_refs("references.bib")
curfol <- normalizePath("..") #set working
# load in the data and save it
library(signal)
library(ggplot2)
library(gridExtra)
library(ggrepel)
library(cowplot)
#####################preprocessing functions
butter.it <- function(x, samplingrate, order, cutoff, type = "low")
{
nyquist <- samplingrate/2
xpad <- c(rep(0, 1000), x, rep(0,1000)) #add some padding
bf <- butter(order,cutoff/nyquist, type=type)
xpad <- as.numeric(signal::filtfilt(bf, xpad))
x <- xpad[1000:(1000+length(x)-1)] #remove the padding
}
#rectify and high and low pass EMG signals
reclow.it <- function(emgsignal, samplingrate, cutoffhigh, cutofflow)
{
#high pass filter
output <- butter.it(emgsignal, samplingrate=samplingrate, order=4, cutoff = cutoffhigh,
type = "high")
#rectify and low pass
output <<- butter.it(abs(output), samplingrate=samplingrate,  order=4, cutoff= cutofflow,
type = "low")
}
###########################################
####################################LOAD IN EMG DATA
EMGdata <- list.files(rawd, pattern = '*Dev_1.csv')
####################################SET common colors for muscles
col_pectoralis    <- '#e7298a'
col_infraspinatus <- '#7570b3'
col_rectus        <- '#d95f02'
col_erector       <- '#1b9e77'
colors_mus <- c("pectoralis major" = col_pectoralis, "infraspinatus" = col_infraspinatus, "rectus abdominus" = col_rectus, "erector spinae" = col_erector)
#show an example
emgd <- read.csv(paste0(rawd, EMGdata[822]))
colnames(emgd) <- c('time_s', 'infraspinatus', 'rectus_abdominus', 'pectoralis_major', 'erector_spinae', 'empty1', 'empty2', 'empty3', 'empty4', 'respiration_belt', 'button_box')
samplingrate <- 1/mean(diff(emgd$time_s))
nyquistemg <- samplingrate/2
#example without strong high pass filter
emgd$time_s <- emgd$time_s-min(emgd$time_s)
emgd$pectoralis_major_sm <- reclow.it(emgd$pectoralis_major, samplingrate= samplingrate, cutoffhigh = 2, cutofflow = 20)
emgd$infraspinatus_sm <- reclow.it(emgd$infraspinatus, samplingrate= samplingrate, cutoffhigh = 2, cutofflow = 20)
emgd$erector_spinae_sm <- reclow.it(emgd$erector_spinae, samplingrate= samplingrate, cutoffhigh = 2, cutofflow = 20)
emgd$rectus_abdominus_sm <- reclow.it(emgd$rectus_abdominus, samplingrate= samplingrate, cutoffhigh = 2, cutofflow = 20)
#example trial
A <- ggplot(emgd[seq(1, nrow(emgd),by=5),], aes(x=time_s))+geom_path(aes(y=infraspinatus_sm, color = 'infraspinatus'))+
geom_path(aes(y=pectoralis_major_sm, color = 'pectoralis major'))+
geom_path(aes(y=rectus_abdominus_sm, color = 'rectus abdominus'))+
geom_path(aes(y=erector_spinae_sm, color = 'erector spinae'))+
geom_text(aes(x = 0.5, y = 750), color = "black", label = "Heart rate peak 1",angle=45, size = 2)+
geom_text(aes(x = 1.4, y = 750), color = "black", label = "Heart rate peak 2",angle=45, size = 2)+
geom_text(aes(x = 4.4, y = 800), color = "black", label = "Heart rate peak 5",angle=45, size = 2)+scale_color_manual(values = colors_mus)
A <- A + labs(x = "time in seconds",
y = "EMG rectified")+ xlab('time in seconds') + ylab('EMG rectified')+theme_cowplot(12)+theme(legend.position="none")
#example without strong high pass filter
emgd$pectoralis_major_sm_h <- reclow.it(emgd$pectoralis_major, samplingrate= samplingrate, cutoffhigh = 30, cutofflow = 20)
emgd$infraspinatus_sm_h  <- reclow.it(emgd$infraspinatus, samplingrate= samplingrate, cutoffhigh = 30, cutofflow = 20)
emgd$erector_spinae_sm_h  <- reclow.it(emgd$erector_spinae, samplingrate= samplingrate, cutoffhigh = 30, cutofflow = 20)
emgd$rectus_abdominus_sm_h  <- reclow.it(emgd$rectus_abdominus, samplingrate= samplingrate, cutoffhigh = 30, cutofflow = 20)
#example trial
B <- ggplot(emgd[seq(1, nrow(emgd),by=5),], aes(x=time_s))+geom_path(aes(y=infraspinatus_sm_h, color = 'infraspinatus'))+
geom_path(aes(y=pectoralis_major_sm_h, color = 'pectoralis major'))+
geom_path(aes(y=rectus_abdominus_sm_h, color = 'rectus abdominus'))+
geom_path(aes(y=erector_spinae_sm_h, color = 'erector spinae'))+  scale_color_manual(values = colors_mus)
B <- B + labs(x = "time in seconds",
y = "EMG rectified",
color = "Legend")+ xlab('time in seconds') + ylab('EMG rectified')+theme_cowplot(12)+
theme(legend.position = c(1, 1),legend.justification = c("right", "top"),
legend.box.just = "right", legend.margin = margin(4, 4, 4, 4)
)
#plot both examples
grid.arrange(A, B, nrow= 2)
setwd("C:/Research_Projects/stress_in_motion_SI/stress_in_motion_SI")
setwd("C:/Research_Projects/stress_in_motion_SI/stress_in_motion_SI")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)      #plotting
library(plotly)       #plotting
library(RColorBrewer) #plotting
library(wesanderson)  #plotting
library(ggbeeswarm)   #plotting
library(papaja)       #markdownfeatures
library(nlme)         #linear mixed regression
library(plyr)         #data wrangling
library(lsmeans)      #post-hoc linear mixed regression
library(tidyr)        #data wrangling
library(lme4)         #linear mixed regression
library(simr)         #power analysis
library(plyr)         #data wrangling
library(gridExtra)    #plotting
library(stringr)      #for string
library(readr)        #for string
#load in the timing data
curfolder <- getwd()
D <- read.csv(paste0(dirname(curfolder), "/ProcessedData/ProcessedTimingData/DD.csv"))
paste0(dirname(curfolder)
)
D <- read.csv(curfolder, "/ProcessedData/ProcessedTimingData/DD.csv"))
D <- read.csv(curfolder, "/ProcessedData/ProcessedTimingData/DD.csv")
curfolder <- getwd()
curfolder
D <- read.csv(curfolder, "/ProcessedData/ProcessedTimingData/DD.csv")
read.csv(paste0(dirname(curfolder), "/ProcessedData/ProcessedTimingData/DD.csv"))
setwd("C:/Research_Projects/stress_in_motion_SI/stress_in_motion_SI/scripts")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)      #plotting
library(plotly)       #plotting
library(RColorBrewer) #plotting
library(wesanderson)  #plotting
library(ggbeeswarm)   #plotting
library(papaja)       #markdownfeatures
library(nlme)         #linear mixed regression
library(plyr)         #data wrangling
library(lsmeans)      #post-hoc linear mixed regression
library(tidyr)        #data wrangling
library(lme4)         #linear mixed regression
library(simr)         #power analysis
library(plyr)         #data wrangling
library(gridExtra)    #plotting
library(stringr)      #for string
library(readr)        #for string
#load in the timing data
curfolder <- getwd()
D <- read.csv(curfolder, "/ProcessedData/ProcessedTimingData/DD.csv")
#load in the timing data
curfolder <- getwd()
D <- read.csv(dirname(curfolder), "/ProcessedData/ProcessedTimingData/DD.csv")
#load in the timing data
curfolder <- getwd()
D <- read.csv(paste0(dirname(curfolder), "/ProcessedData/ProcessedTimingData/DD.csv"))
#this is the confirmatory study, so we can replace 'pilot' with 'confirmatory' to avoid confusion
D$ppn <- str_replace(D$ppn, "Pilot", "Confirmatory")
#rename/code some variables
D$accent  <- ifelse(D$accent=="yes", "stress mark present", "stress mark absent")
D$accent  <- factor(D$accent, levels=c("stress mark absent", "stress mark present"))
D$correct <- factor(D$correct, levels=c("L2 correct", "L2 incorrect & L1 match", "L2 incorrect & L1 mismatch"))
#L2 correct: e.g., correctly saying *profeSOR*, with stress on the final syllable
#L2 correct & L1 match: e.g., incorrectly saying *proFEsor*, with stress on the native language competitor syllable -fe
#L2 correct & L1 mismatch: producing stress on another syllable altogether, e.g., *PROfesor*
D$stress  <- as.character(D$stress)
D$stress <- ifelse(D$stress=="same", "stress-matching", "stress-mismatching")
D$stress <-  factor(D$stress, levels=c("stress-matching", "stress-mismatching"))
D$condition <-  factor(D$condition, levels=c("nogesture", "gesture"))
D$ppn <- parse_number(D$ppn)
#add an accuracy variable
D$accuracy <- ifelse(D$correct== "L2 correct", 1, 0)
#remove a manually coded column with a Dutch name
D$Handmatig.verschil.L1.L2 <- NULL
#create a variable that codes for the direction of (incorrect) stress placement
D$stressdiff_cat <- ifelse(D$stressed.syllable.L1>D$stressed.syllable.L2, 'L1 follows', ifelse(D$stressed.syllable.L1<D$stressed.syllable.L2, 'L1 precedes', 'L1_L2 match'))
#Note that somehow the items pragMAtica and ensaLAda were mislabeled.
table(D$stressdiff_cat,D$stress)
# pragMAtica was mislabeled as stress-mismatching, while it is stress-matching (NL: pragMAtisch)
unique(D[D$stressdiff_cat=='L1_L2 match' & D$stress!="stress-matching",]$target)
# fix pragMAtica:
D$stress[D$stressdiff_cat=='L1_L2 match'] <- 'stress-matching'
# ensaLAda was mislabeled as 'L1 precedes', while it is stress-matching (NL: saLAde)
unique(D[D$stressdiff_cat!='L1_L2 match' & D$stress=="stress-matching",]$target)
# fix ensaLAda:
D$stressdiff_cat[D$stress=='stress-matching'] <- 'L1_L2 match'
# And now it's correct:
table(D$stressdiff_cat,D$stress)
#See the Exclusion_info folder for all details.
exclusions <- read.csv(paste0(dirname(curfolder), '/Exclusion_info/files_met_errors_v4.csv'))
